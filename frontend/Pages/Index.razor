@using frontend.Data
@using frontend.Classes
@inject NavigationManager NavigationManager
@using System.Reflection.Metadata.Ecma335
@page "/"

<h3>Movies</h3>

@if (movies == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Is Completed</th>
                <th>Genre</th>
                <th>
                    <button @onclick="CreateMovie">
                        <i class="fas fa-plus"></i>
                    </button>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in movies)
            {
                <tr>
                    <td>@movie.title</td>
                    <td>@movie.isCompleted</td>
                    <td>@movie.genre</td>
                     <td>
                        <button @onclick="() => Update(movie.id)">
                            <i class="fas fa-edit"></i>
                        </button>
                    </td>
                    <td>
                        <button @onclick="() => DeleteMovie(movie.id)">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<movie> movies;
    ApiConnection con = new();
    protected override async Task OnInitializedAsync()
    {
        GetAllMovies();
    }
    protected async void GetAllMovies(){
         try
        {
            var apiConnection = new ApiConnection();
            Console.WriteLine($"Fetching movies from: {ApiConnection.Url}");
            movies = await apiConnection.GetAllMovies();
            Console.WriteLine("Movies retrieved successfully:", movies);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle error (log, display a message, etc.)
            Console.WriteLine($"Error fetching movies: {ex.Message}");
        }
    }

     void CreateMovie()
    {
        int newId = movies.Count > 0 ? movies.Max(item => item.id) + 1 : 1;
        NavigationManager.NavigateTo($"/create/{newId}");
    }
    async void DeleteMovie(int itemId)
    {
        if(await con.DeleteMovie(itemId)) GetAllMovies();
        Console.WriteLine($"Delete item with ID: {itemId}");
    }

    void Update(int itemId)
    {
        Console.WriteLine($"Edit item with ID: {itemId}");
        NavigationManager.NavigateTo($"/update/{itemId}");
    }
}
